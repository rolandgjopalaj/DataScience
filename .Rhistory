jobs
## create a salary index (per hour)
jobs = jobs %>%
mutate(Salary_Index =
ifelse(Salary_Frequency=="Hourly",
(Salary_From+Salary_To)/2,
ifelse(FullPart_Time=="P",
## if the work is  part-time
ifelse(Salary_Frequency=="Annual",
(Salary_From+Salary_To)/(17*260),
(Salary_From+Salary_To)/(17)
),
## if the work is  full-time
ifelse(Salary_Frequency=="Annual",
(Salary_From+Salary_To)/(37*260),
(Salary_From+Salary_To)/(37)
)
)
)
)
jobs
##I used this command to ad the ACR for every agency to be more visible on the chart
##jobs = mutate(jobs, ACR = ifelse(Agency=="AGENCY NAME", "ACR", ACR))
##Just execute this command to go on
jobs = read.csv("JOBS_ncyV2.csv")##The dataset after adding the acronym column(ACR)
##select the agencies that have the most number of postings
agencyMore=count(jobs, ACR) %>%
arrange(-n) %>%
top_n(10) %>%
pull(ACR) %>%
unlist()
agencyMore = jobs %>% filter(ACR %in% agencyMore)
##visualize it
ggplot(data = agencyMore) +
geom_bar(mapping = aes(x = ACR))
#####################################################
##select the agencies that have the lower number of postings
agencyLess=count(jobs, ACR) %>%
arrange(n)  %>%
pull(ACR) %>%
unlist()
##another way to select the first 10
agencyLess=agencyLess[0:10]
agencyLess = jobs %>% filter(ACR %in% agencyLess)
ggplot(data = agencyLess) +
geom_bar(mapping = aes(x = ACR))
jobs = read.csv("JOBS_ncyV2.csv")
##fix the date(convert it from string to date)
jobs = jobs %>%
separate(Posting_Date, c("month", "day", "year"), sep = "/") %>%
mutate(Posting_Date = make_date(year, month, day)) %>%
select(Id:Work_Unit, Posting_Date, Posting_Updated:ACR)
jobs = jobs %>%
separate(Posting_Updated, c("month", "day", "year"), sep = "/") %>%
mutate(Posting_Updated = make_date(year, month, day)) %>%
select(Id:Posting_Date, Posting_Updated, Salary_Index, ACR)
##change some values for better visibility
jobs["Career_Level"][jobs["Career_Level"] == "Experienced (non-manager)"] = "EXP-NO-Manager"
## show the salaries in base of the career level
## and with the help of the colors we can see the level of the difficulty
## we can also filter the time (from a given year to the day of 17/01/2013)
show = function(posting_type, myDateFrom) {
jobs[!is.na(jobs$Career_Level), ] %>% ##remove the NA elements
filter(Salary_From>0, Posting_Type==posting_type, Posting_Date > myDateFrom) %>%
ggplot(aes(Career_Level, Salary_Index, colour = Classification, size=Nr_of_Positions)) +
geom_point(alpha = 0.4, na.rm = TRUE) +
theme_minimal()
}
show("External", as.Date(paste(2015,"-", 1, "-",1, sep = "")))
show("External", as.Date(paste(2022,"-", 1, "-",1, sep = "")))
show("Internal", as.Date(paste(2023,"-", 1, "-",1, sep = "")))
## Top 10 most frequent Job_category
topCategory = jobs %>%
count(Job_Category) %>%
pull(Job_Category) %>%
unlist()
topCategory = topCategory[0:5]
ggplot(data = filter(jobs, Job_Category %in% topCategory)) +
geom_bar(mapping = aes(x = Job_Category))+
scale_x_discrete(guide = guide_axis(n.dodge=5))
## posts during the years based on the number of opened positions, divided by the classification group, and with some salary details.
jobs %>%
ggplot(aes(Posting_Date, Nr_of_Positions, colour = Classification, size= Salary_Index))+
geom_point(alpha = 0.5, na.rm = TRUE)+
scale_x_date(date_labels = "%Y")
##create  a column difficulty(numeric) that will be the numeric interpretation of classification
## First we remove the "-" symbol to avoid problems with separating
jobs["Classification"][jobs["Classification"] == "Non-Competitive-5"] = "NonCompetitive-5"
##Here we want to create a model of how the difficulty of a job goes based on the salary
jobsDiff=jobs %>%
separate(Classification, c("Classification","Difficulty"), sep = "-")
mod = lm( Difficulty ~ Posting_Date, data = jobsDiff)
##summary(mod)
jobsDiff %>%
ggplot(aes(Posting_Date,Difficulty))+
geom_point(na.rm = TRUE)+
geom_abline(intercept = mod$coefficients[1],
slope = mod$coefficients[2],
color = "red")
##create a column difficulty(numeric) that will be the numeric interpretation of classification
## First we remove the "-" symbol to avoid problems with separating
jobs["Classification"][jobs["Classification"] == "Non-Competitive-5"] = "NonCompetitive-5"
##create a model of how the difficulty of a job goes based on the salary
jobsDiff=jobs %>%
separate(Classification, c("Classification","Difficulty"), sep = "-")
mod = lm( Difficulty ~ Posting_Date, data = jobsDiff)
##summary(mod)
jobsDiff %>%
ggplot(aes(Posting_Date,Difficulty))+
geom_point(na.rm = TRUE)+
geom_abline(intercept = mod$coefficients[1],
slope = mod$coefficients[2],
color = "red")
knitr::opts_chunk$set(cache = TRUE, message = FALSE, warning = FALSE)
library(tidyr)
library(dplyr)
library(readr)
library(lubridate)
library(ggplot2)
## Import the dataset
jobs = read_csv("JOBS_nyc.csv")
jobs
## remove the duplicated lines
jobs = jobs[!duplicated(jobs), ]
jobs
## Select the necessary data and rename the columns (practical names)
jobs = jobs %>%
select(`Job ID`, `Agency`, `Posting Type`, `# Of Positions`, `Title Classification`, `Job Category`, `Full-Time/Part-Time indicator`, `Career Level`, `Salary`, `Work Location`, `Division/Work Unit`, `Posting Date`, `Posting Updated`) %>%
rename(Id=`Job ID`, Posting_Type=`Posting Type`, Nr_of_Positions=`# Of Positions`, Classification=`Title Classification`, Job_Category=`Job Category`, FullPart_Time=`Full-Time/Part-Time indicator`, Career_Level=`Career Level`, Work_Location=`Work Location`, Work_Unit=`Division/Work Unit`, Posting_Date=`Posting Date`, Posting_Updated=`Posting Updated`)
jobs
## Fix the salary problem (not atomic data)
## separating salary interval in  different columns
jobs = jobs %>%
separate(Salary, into = c("Salary_From", "Salary_To", "Salary_Frequency"),
sep = "-", convert = TRUE)
jobs
## create a salary index (per hour)
jobs = jobs %>%
mutate(Salary_Index =
ifelse(Salary_Frequency=="Hourly",
(Salary_From+Salary_To)/2,
ifelse(FullPart_Time=="P",
## if the work is  part-time
ifelse(Salary_Frequency=="Annual",
(Salary_From+Salary_To)/(17*260),
(Salary_From+Salary_To)/(17)
),
## if the work is  full-time
ifelse(Salary_Frequency=="Annual",
(Salary_From+Salary_To)/(37*260),
(Salary_From+Salary_To)/(37)
)
)
)
)
jobs
##I used this command to ad the ACR for every agency to be more visible on the chart
##jobs = mutate(jobs, ACR = ifelse(Agency=="AGENCY NAME", "ACR", ACR))
##Just execute this command to go on
jobs = read.csv("JOBS_ncyV2.csv")##The dataset after adding the acronym column(ACR)
##select the agencies that have the most number of postings
agencyMore=count(jobs, ACR) %>%
arrange(-n) %>%
top_n(10) %>%
pull(ACR) %>%
unlist()
agencyMore = jobs %>% filter(ACR %in% agencyMore)
##visualize it
ggplot(data = agencyMore) +
geom_bar(mapping = aes(x = ACR))
#####################################################
##select the agencies that have the lower number of postings
agencyLess=count(jobs, ACR) %>%
arrange(n)  %>%
pull(ACR) %>%
unlist()
##another way to select the first 10
agencyLess=agencyLess[0:10]
agencyLess = jobs %>% filter(ACR %in% agencyLess)
ggplot(data = agencyLess) +
geom_bar(mapping = aes(x = ACR))
jobs = read.csv("JOBS_ncyV2.csv")
##fix the date(convert it from string to date)
jobs = jobs %>%
separate(Posting_Date, c("month", "day", "year"), sep = "/") %>%
mutate(Posting_Date = make_date(year, month, day)) %>%
select(Id:Work_Unit, Posting_Date, Posting_Updated:ACR)
jobs = jobs %>%
separate(Posting_Updated, c("month", "day", "year"), sep = "/") %>%
mutate(Posting_Updated = make_date(year, month, day)) %>%
select(Id:Posting_Date, Posting_Updated, Salary_Index, ACR)
##change some values for better visibility
jobs["Career_Level"][jobs["Career_Level"] == "Experienced (non-manager)"] = "EXP-NO-Manager"
## show the salaries in base of the career level
## and with the help of the colors we can see the level of the difficulty
## The size indeed shows the number of open positions for that job
## we can also filter the time (from a given year to the day of 17/01/2013)
show = function(posting_type, myDateFrom) {
jobs[!is.na(jobs$Career_Level), ] %>% ##remove the NA elements
filter(Salary_From>0, Posting_Type==posting_type, Posting_Date > myDateFrom) %>%
ggplot(aes(Career_Level, Salary_Index, colour = Classification, size=Nr_of_Positions)) +
geom_point(alpha = 0.4, na.rm = TRUE) +
theme_minimal()
}
show("External", as.Date(paste(2015,"-", 1, "-",1, sep = "")))
show("External", as.Date(paste(2022,"-", 1, "-",1, sep = "")))
show("Internal", as.Date(paste(2023,"-", 1, "-",1, sep = "")))
## Top 10 most frequent Job_category
topCategory = jobs %>%
count(Job_Category) %>%
pull(Job_Category) %>%
unlist()
topCategory = topCategory[0:5]
ggplot(data = filter(jobs, Job_Category %in% topCategory)) +
geom_bar(mapping = aes(x = Job_Category))+
scale_x_discrete(guide = guide_axis(n.dodge=5))
## posts during the years based on the number of opened positions, divided by the classification group, and with some salary details.
jobs %>%
ggplot(aes(Posting_Date, Nr_of_Positions, colour = Classification, size= Salary_Index))+
geom_point(alpha = 0.5, na.rm = TRUE)+
scale_x_date(date_labels = "%Y")
##create a column difficulty(numeric) that will be the numeric interpretation of classification
## First we remove the "-" symbol to avoid problems with separating
jobs["Classification"][jobs["Classification"] == "Non-Competitive-5"] = "NonCompetitive-5"
##create a model of how the difficulty of a job goes based on the salary
jobsDiff=jobs %>%
separate(Classification, c("Classification","Difficulty"), sep = "-")
mod = lm( Difficulty ~ Posting_Date, data = jobsDiff)
##summary(mod)
jobsDiff %>%
ggplot(aes(Posting_Date,Difficulty))+
geom_point(na.rm = TRUE)+
geom_abline(intercept = mod$coefficients[1],
slope = mod$coefficients[2],
color = "red")
##create a column difficulty(numeric) that will be the numeric interpretation of classification
## First we remove the "-" symbol to avoid problems with separating
jobs["Classification"][jobs["Classification"] == "Non-Competitive-5"] = "NonCompetitive-5"
##create a model of how the difficulty of a job goes based on the salary
jobsDiff=jobs %>%
separate(Classification, c("Classification","Difficulty"), sep = "-")
mod = lm( Difficulty ~ Posting_Date, data = jobsDiff)
##summary(mod)
jobsDiff %>%
ggplot(aes(Posting_Date,Difficulty))+
geom_point(na.rm = TRUE)+
geom_abline(intercept = mod$coefficients[1],
slope = mod$coefficients[2],
color = "red")
## posts during the years based on the number of opened positions, divided by the classification group, and with some salary details.
jobs %>%
ggplot(aes(Posting_Date, Nr_of_Positions, colour = Classification, size= Salary_Index))+
geom_point(alpha = 0.5, na.rm = TRUE)+
scale_x_date(date_labels = "%Y")
## Top 10 most frequent Job_category
topCategory = jobs %>%
count(Job_Category) %>%
pull(Job_Category) %>%
unlist()
topCategory = topCategory[0:5]
ggplot(data = filter(jobs, Job_Category %in% topCategory)) +
geom_bar(mapping = aes(x = Job_Category))+
scale_x_discrete(guide = guide_axis(n.dodge=5))
##change some values for better visibility
jobs["Career_Level"][jobs["Career_Level"] == "Experienced (non-manager)"] = "EXP-NO-Manager"
## show the salaries in base of the career level
## and with the help of the colors we can see the level of the difficulty
## The size indeed shows the number of open positions for that job
## we can also filter the time (from a given year to the day of 17/01/2013)
show = function(posting_type, myDateFrom) {
jobs[!is.na(jobs$Career_Level), ] %>% ##remove the NA elements
filter(Salary_From>0, Posting_Type==posting_type, Posting_Date > myDateFrom) %>%
ggplot(aes(Career_Level, Salary_Index, colour = Classification, size=Nr_of_Positions)) +
geom_point(alpha = 0.4, na.rm = TRUE) +
theme_minimal()
}
show("External", as.Date(paste(2015,"-", 1, "-",1, sep = "")))
show("External", as.Date(paste(2022,"-", 1, "-",1, sep = "")))
show("Internal", as.Date(paste(2023,"-", 1, "-",1, sep = "")))
##I used this command to ad the ACR for every agency to be more visible on the chart
##jobs = mutate(jobs, ACR = ifelse(Agency=="AGENCY NAME", "ACR", ACR))
##Just execute this command to go on
jobs = read.csv("JOBS_ncyV2.csv")##The dataset after adding the acronym column(ACR)
##select the agencies that have the most number of postings
agencyMore=count(jobs, ACR) %>%
arrange(-n) %>%
top_n(10) %>%
pull(ACR) %>%
unlist()
agencyMore = jobs %>% filter(ACR %in% agencyMore)
##visualize it
ggplot(data = agencyMore) +
geom_bar(mapping = aes(x = ACR))
#####################################################
##select the agencies that have the lower number of postings
agencyLess=count(jobs, ACR) %>%
arrange(n)  %>%
pull(ACR) %>%
unlist()
##another way to select the first 10
agencyLess=agencyLess[0:10]
agencyLess = jobs %>% filter(ACR %in% agencyLess)
ggplot(data = agencyLess) +
geom_bar(mapping = aes(x = ACR))
knitr::opts_chunk$set(cache = TRUE, message = FALSE, warning = FALSE)
## Top 10 most frequent Job_category
topCategory = jobs %>%
count(Job_Category) %>%
arrange(-n) %>%
pull(Job_Category) %>%
unlist()
library(tidyr)
library(dplyr)
library(readr)
library(lubridate)
library(ggplot2)
jobs = read_csv("JOBS_nyc.csv")
jobs = jobs[!duplicated(jobs), ]
jobs = jobs %>%
select(`Job ID`, `Agency`, `Posting Type`, `# Of Positions`, `Title Classification`, `Job Category`, `Full-Time/Part-Time indicator`, `Career Level`, `Salary`, `Work Location`, `Division/Work Unit`, `Posting Date`, `Posting Updated`) %>%
rename(Id=`Job ID`, Posting_Type=`Posting Type`, Nr_of_Positions=`# Of Positions`, Classification=`Title Classification`, Job_Category=`Job Category`, FullPart_Time=`Full-Time/Part-Time indicator`, Career_Level=`Career Level`, Work_Location=`Work Location`, Work_Unit=`Division/Work Unit`, Posting_Date=`Posting Date`, Posting_Updated=`Posting Updated`)
jobs = jobs %>%
separate(Salary, into = c("Salary_From", "Salary_To", "Salary_Frequency"),
sep = "-", convert = TRUE)
jobs = jobs %>%
mutate(Salary_Index =
ifelse(Salary_Frequency=="Hourly",
(Salary_From+Salary_To)/2,
ifelse(FullPart_Time=="P",
## if the work is  part-time
ifelse(Salary_Frequency=="Annual",
(Salary_From+Salary_To)/(17*260),
(Salary_From+Salary_To)/(17)
),
## if the work is  full-time
ifelse(Salary_Frequency=="Annual",
(Salary_From+Salary_To)/(37*260),
(Salary_From+Salary_To)/(37)
)
)
)
)
##I used this command to ad the ACR for every agency to be more visible on the chart
##jobs = mutate(jobs, ACR = ifelse(Agency=="AGENCY NAME", "ACR", ACR))
##Just execute this command to go on
jobs = read.csv("JOBS_ncyV2.csv")##The dataset after adding the acronym column(ACR)
##select the agencies that have the most number of postings
agencyMore=count(jobs, ACR) %>%
arrange(-n) %>%
top_n(10) %>%
pull(ACR) %>%
unlist()
agencyMore = jobs %>% filter(ACR %in% agencyMore)
##visualize it
ggplot(data = agencyMore) +
geom_bar(mapping = aes(x = ACR))
#####################################################
##select the agencies that have the lower number of postings
agencyLess=count(jobs, ACR) %>%
arrange(n)  %>%
pull(ACR) %>%
unlist()
##another way to select the first 10
agencyLess=agencyLess[0:10]
agencyLess = jobs %>% filter(ACR %in% agencyLess)
ggplot(data = agencyLess) +
geom_bar(mapping = aes(x = ACR))
jobs = read.csv("JOBS_ncyV2.csv")
##fix the date(convert it from string to date)
jobs = jobs %>%
separate(Posting_Date, c("month", "day", "year"), sep = "/") %>%
mutate(Posting_Date = make_date(year, month, day)) %>%
select(Id:Work_Unit, Posting_Date, Posting_Updated:ACR)
jobs = jobs %>%
separate(Posting_Updated, c("month", "day", "year"), sep = "/") %>%
mutate(Posting_Updated = make_date(year, month, day)) %>%
select(Id:Posting_Date, Posting_Updated, Salary_Index, ACR)
##change some values for better visibility
jobs["Career_Level"][jobs["Career_Level"] == "Experienced (non-manager)"] = "EXP-NO-Manager"
## Top 10 most frequent Job_category
topCategory = jobs %>%
count(Job_Category) %>%
arrange(-n) %>%
pull(Job_Category) %>%
unlist()
topCategory = topCategory[0:5]
ggplot(data = filter(jobs, Job_Category %in% topCategory)) +
geom_bar(mapping = aes(x = Job_Category))+
scale_x_discrete(guide = guide_axis(n.dodge=5))
knitr::opts_chunk$set(cache = TRUE, message = FALSE, warning = FALSE)
library(tidyr)
library(dplyr)
library(readr)
library(lubridate)
library(ggplot2)
## Import the dataset
jobs = read_csv("JOBS_nyc.csv")
jobs
## remove the duplicated lines
jobs = jobs[!duplicated(jobs), ]
jobs
## Select the necessary data and rename the columns (practical names)
jobs = jobs %>%
select(`Job ID`, `Agency`, `Posting Type`, `# Of Positions`, `Title Classification`, `Job Category`, `Full-Time/Part-Time indicator`, `Career Level`, `Salary`, `Work Location`, `Division/Work Unit`, `Posting Date`, `Posting Updated`) %>%
rename(Id=`Job ID`, Posting_Type=`Posting Type`, Nr_of_Positions=`# Of Positions`, Classification=`Title Classification`, Job_Category=`Job Category`, FullPart_Time=`Full-Time/Part-Time indicator`, Career_Level=`Career Level`, Work_Location=`Work Location`, Work_Unit=`Division/Work Unit`, Posting_Date=`Posting Date`, Posting_Updated=`Posting Updated`)
jobs
## Fix the salary problem (not atomic data)
## separating salary interval in  different columns
jobs = jobs %>%
separate(Salary, into = c("Salary_From", "Salary_To", "Salary_Frequency"),
sep = "-", convert = TRUE)
jobs
## create a salary index (per hour)
jobs = jobs %>%
mutate(Salary_Index =
ifelse(Salary_Frequency=="Hourly",
(Salary_From+Salary_To)/2,
ifelse(FullPart_Time=="P",
## if the work is  part-time
ifelse(Salary_Frequency=="Annual",
(Salary_From+Salary_To)/(17*260),
(Salary_From+Salary_To)/(17)
),
## if the work is  full-time
ifelse(Salary_Frequency=="Annual",
(Salary_From+Salary_To)/(37*260),
(Salary_From+Salary_To)/(37)
)
)
)
)
jobs
##I used this command to ad the ACR for every agency to be more visible on the chart
##jobs = mutate(jobs, ACR = ifelse(Agency=="AGENCY NAME", "ACR", ACR))
##Just execute this command to go on
jobs = read.csv("JOBS_ncyV2.csv")##The dataset after adding the acronym column(ACR)
##select the agencies that have the most number of postings
agencyMore=count(jobs, ACR) %>%
arrange(-n) %>%
top_n(10) %>%
pull(ACR) %>%
unlist()
agencyMore = jobs %>% filter(ACR %in% agencyMore)
##visualize it
ggplot(data = agencyMore) +
geom_bar(mapping = aes(x = ACR))
#####################################################
##select the agencies that have the lower number of postings
agencyLess=count(jobs, ACR) %>%
arrange(n)  %>%
pull(ACR) %>%
unlist()
##another way to select the first 10
agencyLess=agencyLess[0:10]
agencyLess = jobs %>% filter(ACR %in% agencyLess)
ggplot(data = agencyLess) +
geom_bar(mapping = aes(x = ACR))
jobs = read.csv("JOBS_ncyV2.csv")
##fix the date(convert it from string to date)
jobs = jobs %>%
separate(Posting_Date, c("month", "day", "year"), sep = "/") %>%
mutate(Posting_Date = make_date(year, month, day)) %>%
select(Id:Work_Unit, Posting_Date, Posting_Updated:ACR)
jobs = jobs %>%
separate(Posting_Updated, c("month", "day", "year"), sep = "/") %>%
mutate(Posting_Updated = make_date(year, month, day)) %>%
select(Id:Posting_Date, Posting_Updated, Salary_Index, ACR)
##change some values for better visibility
jobs["Career_Level"][jobs["Career_Level"] == "Experienced (non-manager)"] = "EXP-NO-Manager"
## show the salaries in base of the career level
## and with the help of the colors we can see the level of the difficulty
## The size indeed shows the number of open positions for that job
## we can also filter the time (from a given year to the day of 17/01/2013)
show = function(posting_type, myDateFrom) {
jobs[!is.na(jobs$Career_Level), ] %>% ##remove the NA elements
filter(Salary_From>0, Posting_Type==posting_type, Posting_Date > myDateFrom) %>%
ggplot(aes(Career_Level, Salary_Index, colour = Classification, size=Nr_of_Positions)) +
geom_point(alpha = 0.4, na.rm = TRUE) +
theme_minimal()
}
show("External", as.Date(paste(2015,"-", 1, "-",1, sep = "")))
show("External", as.Date(paste(2022,"-", 1, "-",1, sep = "")))
show("Internal", as.Date(paste(2023,"-", 1, "-",1, sep = "")))
## Top 10 most frequent Job_category
topCategory = jobs %>%
count(Job_Category) %>%
arrange(-n) %>%
pull(Job_Category) %>%
unlist()
topCategory = topCategory[0:5]
ggplot(data = filter(jobs, Job_Category %in% topCategory)) +
geom_bar(mapping = aes(x = Job_Category))+
scale_x_discrete(guide = guide_axis(n.dodge=5))
## posts during the years based on the number of opened positions, divided by the classification group, and with some salary details.
jobs %>%
ggplot(aes(Posting_Date, Nr_of_Positions, colour = Classification, size= Salary_Index))+
geom_point(alpha = 0.5, na.rm = TRUE)+
scale_x_date(date_labels = "%Y")
##create a column difficulty(numeric) that will be the numeric interpretation of classification
## First we remove the "-" symbol to avoid problems with separating
jobs["Classification"][jobs["Classification"] == "Non-Competitive-5"] = "NonCompetitive-5"
##create a model of how the difficulty of a job goes based on the salary
jobsDiff=jobs %>%
separate(Classification, c("Classification","Difficulty"), sep = "-")
mod = lm( Difficulty ~ Posting_Date, data = jobsDiff)
##summary(mod)
jobsDiff %>%
ggplot(aes(Posting_Date,Difficulty))+
geom_point(na.rm = TRUE)+
geom_abline(intercept = mod$coefficients[1],
slope = mod$coefficients[2],
color = "red")
